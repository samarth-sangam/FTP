
import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Samarth S Sangam
 */
public class ServerFrame extends javax.swing.JFrame implements Runnable{

    /**
     * Creates new form ServerFrame
     */
    Thread t;
    DataOutputStream out;
    DataInputStream in;
    BufferedReader bufread;
    BufferedWriter bufwrite;
    Scanner s=new Scanner(System.in);
    Socket sc;

    ServerFrame(Socket sock) 
    {
        t = new Thread(this, "Server");
                    try
                    {
                            sc=sock;
                            out=new DataOutputStream(sc.getOutputStream());
                            in=new DataInputStream(sc.getInputStream());
                            bufread=new BufferedReader(new InputStreamReader(System.in));
                            t.start();
                    }	
                    catch(IOException ex)
                    {
                        JOptionPane.showMessageDialog(null ,"Input output Error", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
    }	
    void receive() throws Exception
    {
        JOptionPane.showMessageDialog(null, "Enter Filename");
    }
    void send() throws Exception
    {
            String name=in.readUTF();
            File f=new File(name);
            if(!f.exists())
            {
                    out.writeUTF("Requested file does not exist");
            }
            else
            {
                    out.writeUTF("Sending file");
                    System.out.println("Sending file");
                try (FileInputStream fi = new FileInputStream(f)) {
                    int data;
                    do
                    {
                        data=fi.read();
                        out.write(data);
                    }while(data!=-1);
                    System.out.println("File successfully sent");
                }
                    in.close();
                    out.close();
            }
    }

    void chat() throws IOException
    {
            Boolean con;
            out.writeBoolean(false);
            while(true)
            {
                    con=in.readBoolean();
                    if(con)
                    {
                            String msgi=in.readUTF();
                            System.out.println("Client: "+msgi);
                            out.writeBoolean(false);
                    }
                    else
                    {
                            out.writeBoolean(true);
                            System.out.print("Server: ");
                            String msgo=bufread.readLine();
                            out.writeUTF(msgo);
                    }
            }
    }

    /**
     *
     */
    @Override
    public void run() 
    {
            while(true)
            {
                    {
                            try
                            {
                                    String cmd;
                                    cmd=in.readUTF();
                                    if(cmd.compareTo("Send")==0)
                                    {	
                                            receive();
                                    }
                                    else if(cmd.compareTo("Receive")==0)
                                    {	
                                            send();
                                    }
                                    else if(cmd.compareTo("Exit")==0)
                                    {
                                            System.out.println("Server closed");
                                            System.exit(0);
                                    }
                                    else if(cmd.compareTo("Chat")==0)
                                    {
                                            chat();
                                    }
                            }	
                            catch(Exception ex)
                            {
                                                        JOptionPane.showMessageDialog(null ,"Input output Error", "ERROR", JOptionPane.ERROR_MESSAGE);
                            }
                    }
            }
    }
    public ServerFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Exit = new javax.swing.JButton();
        Server = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        Filename = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        Server.setText("                                        Server");

        jLabel1.setText("Filename");

        Filename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilenameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(66, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Server, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Exit)
                        .addGap(162, 162, 162))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Filename, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Server, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(Filename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 139, Short.MAX_VALUE)
                .addComponent(Exit))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    JTextField textField = new JTextField(10000);
    private void FilenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilenameActionPerformed
        try {
            // TODO add your handling code here:
            String name;
            name = textField.getText();
            out.writeUTF(name);
            String msg=in.readUTF();
            if(msg.compareTo("Requested file does not exist")==0)
                JOptionPane.showMessageDialog(null ,"Requested file does not exist\nIncorrect Filename", "File not Found", JOptionPane.ERROR_MESSAGE);
            else
            {
                JOptionPane.showMessageDialog(null, "Recieving File......");
                File f=new File(name);
                if(f.exists())
                JOptionPane.showMessageDialog(null ,"Requested file Already exist", "File Already Exists", JOptionPane.ERROR_MESSAGE);
                else if(msg.compareTo("Sending file")==0)
                {
                    try (FileOutputStream fo = new FileOutputStream(f)) {
                        int data;
                        do
                        {
                            data=in.read();
                            fo.write(data);
                        }while(data!=-1);
                JOptionPane.showMessageDialog(null, "Recieved File");
                        in.close();
                        out.close();
                    }
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(ServerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_FilenameActionPerformed

    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */

        ServerSocket sock;
        sock = new ServerSocket(6003);
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                while(true){
                    try {
                        new ServerFrame(sock.accept()).setVisible(true);
                    } catch (IOException ex) {
                        Logger.getLogger(ServerFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Exit;
    private javax.swing.JTextField Filename;
    private javax.swing.JLabel Server;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
